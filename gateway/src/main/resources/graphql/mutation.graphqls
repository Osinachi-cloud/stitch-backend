

type Mutation{
    createCustomer(customerRequest: CustomerRequest): CustomerDto
    updateCustomer(customerRequest: CustomerUpdateRequest, emailAddress: String): CustomerDto
    updateCustomerProfileImage(profileImage: String, emailAddress: String): Response
    verifyEmail(emailAddress: String): VerificationResponse
    validateEmailCode(verificationRequest: EmailVerificationRequest): VerificationResponse
    customerLogin(loginRequest: LoginRequest): LoginResponse
    vendorLogin(loginRequest: LoginRequest): LoginResponse
    requestToken(refreshToken: String): Token
    requestPasswordReset(emailAddress: String): Response
    validateResetCode(resetCodeValidationRequest: ResetCodeValidationRequest): Response
    resetPassword(passwordResetRequest: PasswordResetRequest): Response
    createPin(pin: String): Response
    resetPinInitiateEmail(phoneNumber: String): Response
    resetPin(pin: String): Response
    allowSaveCard(savedCard: Boolean): Response
    createBodyMeasurement(bodyMeasurementRequest: BodyMeasurementRequest) : BodyMeasurementDto
    updateBodyMeasurement(bodyMeasurementRequest: BodyMeasurementRequest): BodyMeasurementDto
    createProductOrder(productOrderRequest: ProductOrderRequest) : ProductOrderDto
    updateProductOrder(productOrderRequest: ProductOrderRequest) : ProductOrderDto
    createProduct(productRequest:ProductRequest): ProductDto
    updateProduct(productUpdateRequest: ProductUpdateRequest, productId: String): ProductDto
    deleteProduct(productId:String): Response
    updateProductProfileImage(productImage: String, productId: String ): Response
    togglePublishProduct(productId : String): Boolean
    addProductLikes(productId : String): Response
    deleteProductLike(productId : String): Response
    addProductCart(productId : String): Response
    addProductCartWithVariation(productId : String, productVariation: ProductVariationRequest): Response
    deleteProductCart(productId : String, productVariation: ProductVariationRequest): Response
    removeEntireProductFromCart(productId : String, productVariation: ProductVariationRequest): Response
    clearCart: Response
    initializePayment(paymentRequest: InitializeTransactionRequest): InitializeTransactionResponse
    verifyPayment(paymentReference: String): PaymentVerificationResponse
}



type ProductOrderDto{

    status: String
    referenceNumber: String
    transactionId: String
    message: String
    clientSecret: String
    paymentId: String
    productCategoryName: String
    vendor: String
    paymentMode: String
    amount: BigDecimal
    customerId: String
    customerName: String
    email: String
    cardId: String
    txRef: String
    saveCard: Boolean
    currency: String
    narration: String
    walletId: String
    pin: String
    psp: String
    saveBeneficiary: Boolean
    number: Int
    startTime: String
    orderId: String
    bodyMeasurementId: BigDecimal

}

input ProductOrderRequest {

    productId: String
    productCategoryName: String
    vendorId: String
    paymentMode: PaymentMode
    currency: Currency
    amount: BigDecimal
    narration: String
    bodyMeasurementId: BigDecimal
    orderId: String
    status: String
}

input UpdateOrderRequest {
    productId: String
    productCategoryName: String
    vendorId: String
    paymentMode: PaymentMode
    currency: Currency
    amount: BigDecimal
    narration: String
    bodyMeasurementId: BigDecimal
    orderId: String
    status: String
}

enum PaymentMode {
    FLUTTERWAVE
    PAYSTACK
}

enum OrderStatus {
    PROCESSING
    COMPLETED
    FAILED
    REJECTED
}

enum Currency {
    NGN
    USD
}

type BodyMeasurementDto {
    tag:String
    neck:Int
    shoulder:Int
    chest:Int
    tummy:Int
    hipWidth:Int
    neckToHipLength:Int
    shortSleeveAtBiceps:Int
    midSleeveAtElbow:Int
    longSleeveAtWrist:Int
    waist:Int
    thigh:Int
    knee:Int
    ankle:Int
    trouserLength:Int
}

input BodyMeasurementRequest {
    tag: String
    neck:Int
    shoulder:Int
    chest:Int
    tummy:Int
    hipWidth:Int
    neckToHipLength:Int
    shortSleeveAtBiceps:Int
    midSleeveAtElbow:Int
    longSleeveAtWrist:Int
    waist:Int
    thigh:Int
    knee:Int
    ankle:Int
    trouserLength:Int
}

input InitializeTransactionRequest {
    amount: BigDecimal
    channel: [String]
    reference: String
    productId:String
    productCategoryName: String
    vendorId: String
    narration: String
    quantity: BigDecimal
    orderId: String
    customerId: String
    cartProductsIds: [String]
    sleeveType:String
    color:String
    bodyMeasurementTag:String
}

type Response {
    code: Int
    message: String
}

input ResetCodeValidationRequest {
    emailAddress: String!
    resetCode: String!
}

input PasswordResetRequest {
    emailAddress: String!
    resetCode: String!
    newPassword: String!
    confirmPassword: String!
}


input CustomerRequest {
    firstName: String!
    lastName: String!
    emailAddress: String!
    username:String!
    phoneNumber: String!
#    country: String!
    password: String!
    device: DeviceDto
    roleName:String!
}

input CustomerUpdateRequest {
    firstName: String
    lastName: String
    country: String
    profileImage: String
}

input DeviceDto {
    deviceId: String
    name: String
    model: String
    os: String
}


type LoginResponse {
    customerId: ID
    vendorId: ID
    firstName: String
    lastName: String
    emailAddress: String
    phoneNumber: String
    hasPin: Boolean
    saveCard: Boolean
    enablePush: Boolean
    tier: String
    country: String
    accessToken: String
    refreshToken: String
    wallets: [WalletDto]
    profileImage: String
    role: String

}

input LoginRequest {
    emailAddress: String
    password: String
}

input EmailVerificationRequest {
    verificationCode: String!
    emailAddress: String!
}

type VerificationResponse {
    code: Int
    message: String
}

input ProductUpdateRequest {
    name: String
    productImage: String
    amount: BigDecimal
    quantity: BigDecimal
    category: String
    fixedPrice: Boolean
    code: String
}

input ProductRequest {
    productId: String
    vendorId: String
    name: String
    code: String
    productImage: String
    amount: BigDecimal
    quantity: BigDecimal
    category: String
    fixedPrice: Boolean
    country: String
    discount: BigDecimal
    publishStatus: String
    shortDescription:String
    longDescription:String
    materialUsed:String
    readyIn:String
    sellingPrice:BigDecimal
    productVariation : [ProductVariationRequest]

}

type ProductDto {
    name: String
    code: String
    productImage: String
    price: BigDecimal
    quantity: BigDecimal
    outOfStock: Boolean
    category: String
    provider: String
    fixedPrice: Boolean
    country: String
    publishStatus: String
    discount: BigDecimal
    productId: String
    shortDescription:String
    longDescription:String
    materialUsed:String
    readyIn:String
    sellingPrice:BigDecimal
    liked: Boolean
    vendor: CustomerDto
    productVariation : [ProductVariation]

}

type ProductVariation {
    color: String
    sleeveType: String
}

input ProductVariationRequest {
    color: String
    sleeveType: String
    measurementTag: String
}

type CartDto {
    name: String
    code: String
    productImage: String
    price: BigDecimal
    quantity: BigDecimal
    category: String
    fixedPrice: Boolean
    vendorId: String
    discount: BigDecimal
    productId: String
    readyIn:String
    sellingPrice:BigDecimal
    amountByQuantity: BigDecimal
    color: String
    sleeveType: String
    measurementTag: String
}

input ProductFilterRequest {
    page: Int
    size: Int
    name: String
    code: String
    outOfStock: Boolean
    categories: [String]
    provider: String
    vendorId: String
    publishStatus: String
    productId: String
    minPrice: Int
    maxPrice: Int
}

input UserFilterRequest {
    page: Int
    size: Int
    firstName: String
    lastName: String
    emailAddress: String
    roleId: Int
}

input ProductPageRequest {
    page: Int
    size: Int
}




