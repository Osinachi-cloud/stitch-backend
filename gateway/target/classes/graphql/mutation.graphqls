

type Mutation{
    createCustomer(customerRequest: CustomerRequest): CustomerDto
    updateCustomer(customerRequest: CustomerUpdateRequest, emailAddress: String): CustomerDto
    updateCustomerProfileImage(profileImage: String, emailAddress: String): Response
    verifyEmail(emailAddress: String): VerificationResponse
    validateEmailCode(verificationRequest: EmailVerificationRequest): VerificationResponse
    login(loginRequest: LoginRequest): LoginResponse
    requestToken(refreshToken: String): Token
    requestPasswordReset(emailAddress: String): Response
    validateResetCode(resetCodeValidationRequest: ResetCodeValidationRequest): Response
    resetPassword(passwordResetRequest: PasswordResetRequest): Response
    createPin(pin: String): Response
    resetPinInitiateEmail(phoneNumber: String): Response
    resetPin(pin: String): Response
    allowSaveCard(savedCard: Boolean): Response
    createBodyMeasurement(bodyMeasurementRequest: BodyMeasurementRequest) : BodyMeasurementDto
    updateBodyMeasurement(bodyMeasurementRequest: BodyMeasurementRequest): BodyMeasurementDto
    createProductOrder(productOrderRequest: ProductOrderRequest) : ProductOrderDto
}

type ProductOrderDto{

    status: String
    referenceNumber: String
    transactionId: String
    message: String
    clientSecret: String
    paymentId: String
    productCategoryName: String
    vendor: String
    paymentMode: String
    amount: BigDecimal
    customerId: String
    customerName: String
    email: String
    cardId: String
    txRef: String
    saveCard: Boolean
    currency: String
    narration: String
    walletId: String
    pin: String
    psp: String
    saveBeneficiary: Boolean
    number: Int
    startTime: String
    orderId: String
}

input ProductOrderRequest {

    orderId: String
    customerId: String
    productId: String
    productCategoryName: String
    vendorId: String
    paymentMode: PaymentMode
    currency: Currency
    amount: BigDecimal
    status: OrderStatus
    narration: String

}

enum PaymentMode {
    FLUTTERWAVE
    PAYSTACK
}

enum OrderStatus {
    PROCESSING
    COMPLETED
    FAILED
    REJECTED
}

enum Currency {
    NGN
    USD
}

type BodyMeasurementDto {
    neck:Int
    shoulder:Int
    chest:Int
    tummy:Int
    hipWidth:Int
    neckToHipLength:Int
    shortSleeveAtBiceps:Int
    midSleeveAtElbow:Int
    longSleeveAtWrist:Int
    waist:Int
    thigh:Int
    knee:Int
    ankle:Int
    trouserLength:Int
}

input BodyMeasurementRequest {
    neck:Int
    shoulder:Int
    chest:Int
    tummy:Int
    hipWidth:Int
    neckToHipLength:Int
    shortSleeveAtBiceps:Int
    midSleeveAtElbow:Int
    longSleeveAtWrist:Int
    waist:Int
    thigh:Int
    knee:Int
    ankle:Int
    trouserLength:Int
}

#input TransactionRequest {
#    currency: String!
#    amount: BigDecimal!
#    walletId: String!
#    transactionType: String
#    description: String
#    pin: String!
#    cardId: String
#}

#input TransactionVerificationRequest {
#    transactionId: String!
#    currency: String!
#    amount: BigDecimal!
#    txRef: String!
#    walletId: String!
#    transactionType: String
#    description: String
#    saveCard: Boolean
#}

#type WalletTransactionRequestDto {
#    transactionId: String
#    walletId: String
#    currency: String
#    amount: BigDecimal
#    status: String
#    paymentId: String
#    clientSecret: String
#}

type Response {
    code: Int
    message: String
}

input ResetCodeValidationRequest {
    emailAddress: String!
    resetCode: String!
}

input PasswordResetRequest {
    emailAddress: String!
    resetCode: String!
    newPassword: String!
    confirmPassword: String!
}


input CustomerRequest {
    firstName: String!
    lastName: String!
    emailAddress: String!
    username:String!
    phoneNumber: String!
    country: String!
    password: String!
    device: DeviceDto
}

input CustomerUpdateRequest {
    firstName: String
    lastName: String
    country: String
    profileImage: String
}

input DeviceDto {
    deviceId: String
    name: String
    model: String
    os: String
}


type LoginResponse {
    customerId: ID
    firstName: String
    lastName: String
    emailAddress: String
    phoneNumber: String
    hasPin: Boolean
    saveCard: Boolean
    enablePush: Boolean
    tier: String
    country: String
    accessToken: String
    refreshToken: String
    wallets: [WalletDto]
    profileImage: String
}

input LoginRequest {
    emailAddress: String
    password: String
}

input EmailVerificationRequest {
    verificationCode: String!
    emailAddress: String!
}

type VerificationResponse {
    code: Int
    message: String
}

#type CustomerDto {
#    customerId: ID
#    firstName: String
#    lastName: String
#    emailAddress: String
#    phoneNumber: String
#    tier: String
#    country: String
#    hasPin: Boolean
#    enablePush: Boolean
#
#}




